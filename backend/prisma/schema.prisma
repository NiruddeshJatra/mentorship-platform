generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  passwordHash     String   @map("password_hash")
  name             String
  role             Role
  bio              String?
  profileImageUrl  String?  @map("profile_image_url")
  linkedinUrl      String?  @map("linkedin_url")
  portfolioUrl     String?  @map("portfolio_url")
  timezone         String   @default("Asia/Dhaka")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relationships
  mentor           Mentor?
  mentee           Mentee?
  rescheduleRequests RescheduleRequest[]

  @@map("users")
}

model Mentor {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  company        String?
  experienceYears Int?    @map("experience_years")
  hourlyRate     Decimal? @map("hourly_rate") @db.Decimal(10, 2)
  averageRating  Decimal  @default(0) @map("average_rating") @db.Decimal(3, 2)
  totalReviews   Int      @default(0) @map("total_reviews")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relationships
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  expertise           MentorExpertise[]
  availabilitySlots   AvailabilitySlot[]
  bookingsAsMentor    Booking[]          @relation("MentorBookings")
  reviewsReceived     Review[]           @relation("MentorReviews")

  @@map("mentors")
}

model Mentee {
  id            String   @id @default(uuid())
  userId        String   @unique @map("user_id")
  currentRole   String?  @map("current_role")
  learningGoals String?  @map("learning_goals")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingsAsMentee   Booking[] @relation("MenteeBookings")
  reviewsGiven       Review[]  @relation("MenteeReviews")

  @@map("mentees")
}

model Topic {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String?
  isPredefined Boolean  @default(true) @map("is_predefined")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relationships
  mentorExpertise MentorExpertise[]

  @@map("topics")
}

model MentorExpertise {
  id              String   @id @default(uuid())
  mentorId        String   @map("mentor_id")
  topicId         String   @map("topic_id")
  price           Decimal  @db.Decimal(10, 2)
  durationMinutes Int      @map("duration_minutes")
  description     String?
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  mentor   Mentor    @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  topic    Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@unique([mentorId, topicId])
  @@map("mentor_expertise")
}

model AvailabilitySlot {
  id                 String            @id @default(uuid())
  mentorId           String            @map("mentor_id")
  startDatetime      DateTime          @map("start_datetime")
  endDatetime        DateTime          @map("end_datetime")
  isRecurring        Boolean           @default(false) @map("is_recurring")
  recurrencePattern  String?           @map("recurrence_pattern")
  recurrenceEndDate  DateTime?         @map("recurrence_end_date")
  status             AvailabilityStatus @default(AVAILABLE)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  // Relationships
  mentor   Mentor    @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("availability_slots")
}

model Booking {
  id                 String        @id @default(uuid())
  menteeId           String        @map("mentee_id")
  mentorId           String        @map("mentor_id")
  mentorExpertiseId  String        @map("mentor_expertise_id")
  availabilitySlotId String        @map("availability_slot_id")
  startDatetime      DateTime      @map("start_datetime")
  endDatetime        DateTime      @map("end_datetime")
  status             BookingStatus @default(PENDING)
  totalPrice         Decimal       @map("total_price") @db.Decimal(10, 2)
  paymentStatus      PaymentStatus @default(PENDING) @map("payment_status")
  mentorNotes        String?       @map("mentor_notes")
  menteeNotes        String?       @map("mentee_notes")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relationships
  mentee             Mentee            @relation("MenteeBookings", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor             Mentor            @relation("MentorBookings", fields: [mentorId], references: [id], onDelete: Cascade)
  mentorExpertise    MentorExpertise   @relation(fields: [mentorExpertiseId], references: [id], onDelete: Cascade)
  availabilitySlot   AvailabilitySlot  @relation(fields: [availabilitySlotId], references: [id], onDelete: Cascade)
  review             Review?
  rescheduleRequests RescheduleRequest[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  bookingId String   @unique @map("booking_id")
  menteeId  String   @map("mentee_id")
  mentorId  String   @map("mentor_id")
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  mentee  Mentee  @relation("MenteeReviews", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor  Mentor  @relation("MentorReviews", fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model RescheduleRequest {
  id            String   @id @default(uuid())
  bookingId     String
  proposerId    String
  proposedStart DateTime
  proposedEnd   DateTime
  status        String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  responseAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  proposer      User     @relation(fields: [proposerId], references: [id])

  @@map("reschedule_requests")
}

// Enums
enum Role {
  MENTOR
  MENTEE
}

enum AvailabilityStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RequestedBy {
  MENTOR
  MENTEE
}

enum RescheduleStatus {
  PENDING
  APPROVED
  REJECTED
}